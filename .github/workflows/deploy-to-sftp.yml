name: Deploy to SFTP with Build

on:
  push:
    branches:
      - main # Trigger on push to the main branch
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest # The type of runner that the job will run on

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Use this action to install Node.js
        with:
          node-version: '18' # Specify your project's Node.js version (e.g., '14', '16', '18', '20')

      - name: Install dependencies
        run: npm install # Installs packages listed in package.json

      - name: Build project
        run: npm run build # Runs the 'build' script defined in your package.json

      - name: Deploy to SFTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4 # *** THIS IS THE CORRECT SFTP ACTION ***
        with:
          server: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: ${{ secrets.SFTP_PORT }} # Optional: only if not default 22
          # No 'protocol' needed here, as it's an SFTP-specific action
          local_path: /dist/ # *** IMPORTANT: Specify your build output directory ***
          server-dir: / # The remote directory on your SFTP server
          # Optional: Exclude files/folders from upload (using .gitignore syntax)
          # Make sure these are relative to local-path if you use wildcards for local-path
          # For example, if local-path is './build/*', and you want to exclude build/node_modules
          # then you'd exclude 'node_modules/' here.
          # The 'exclude' parameter for wlixcc/sftp-deploy might behave slightly differently,
          # so test this if you rely heavily on it. For simple static site builds,
          # the build process often handles exclusion.
          # exclude: |
          #   node_modules/
          #   *.log
          #   .DS_Store
          # Optional: Delete files on remote that are not present locally
          # args: '-avz --delete' # Use rsync-like arguments if needed for advanced sync