# .github/workflows/deploy.yml

name: Deploy React App to Afrihost

on:
  push:
    branches:
      - main # This workflow will run whenever you push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version your React app needs (e.g., '18', '20', '22')

      - name: Install dependencies
        run: npm ci # 'npm ci' is preferred over 'npm install' in CI/CD environments for consistent builds

      - name: Build React App
        run: npm run build # This command builds your React app for production, creating the 'build' folder

      - name: Deploy to Afrihost via SFTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.0 
        with:
          server: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USERNAME }}
          password: ${{ secrets.SFTP_PASSWORD }}
          port: ${{ secrets.SFTP_PORT }} # Optional: only if not default 22
          local-dir: ./build/ # The local directory containing your built React app files
          remote-dir: /public_html/ # The remote directory on your Afrihost server
          # The 'local-dir: ./build/' combined with 'remote-dir: /public_html/'
          # means the *contents* of your local 'build' folder will be placed directly
          # into the remote '/public_html/' folder. This ensures your index.html
          # is accessible at your domain's root.
          delete-remote: true # Optional: Deletes files on the remote server that are not in the local-dir.
                              # Use with caution! This ensures a clean deployment but can remove
                              # other files in public_html if they are not part of your build.
                              # If you have other files in public_html that are NOT part of your build,
                              # set this to `false` or manually manage them.
          state-name: .ftp-deploy-state.json # Stores deployment state to optimize future deployments
          log-level: verbose # Provides detailed logs for debugging